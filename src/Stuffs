The program breaks if i have more than 1 keys in main node is because in fn children_not_empty, only the 1st item from root node is selected. 
1st try- Create a bool var that gets true at the end of children_not_empty. (Also deleted min_size because it was useless)
    -> Scrapped as it isnt expandable beyond root node
2nd try - min_size_subceeded() will return a bool & if true, other value except 1st key gets added.
    -> Scrapped as creating new instance of function resets the bool value.
3rd try - Global static Mutex<T> which tracks the number of time min_size_subceeded() has been invoked 
    -> Would need millions of static var for high nodes count.
4th try - create initial rank as 0 and add it later.
    -> Just doesn't work
5th try - Create a separate function that handles the error prone logic. (Also deleted max_size because it was useless too + The output looks cleaner).
    -> IT WORKED LETSGOOOOOOOOOOO
    
    
The fn responsible for adding keys that isnt less than lowest root key and higher than highest root ket isn't working.
1st try - The else loop in min_size_1() responsible for handling non lowest/highest was empty which according to my assumption happens when the input key is equal to root key, hence duplication.
    -> Tried fixing by removing the the key value from the child. Didn't work.
2nd try - I moved the implementation outside the else loop which caused more problem.
3rd try - The else loop must contain the original root keys that gets duplicated, hence the original root Items could be sent into a new vector to be later pushed.
    -> Failed as `else` would contain more than the orignal root keys.
4th try - Just ditched the concept of else loop and created a new for loop which iterates through the temp vector holding root keys, and if the root keys match the children keys, the index of children key is taken and removed.
    -> Works but was a pain in the ass to get the implementation right.
    
    4.1 try - Created a new fn that takes the last value and puts it inside the pre-existing child node.
            -> Worked lol.
            
Forced to implement a parent reference with weak but faced,
    1) `std::rc::Weak<Mutex<Node>>` cannot be sent between threads safely & found my original lazy_static! was pretty heavy.
    
    
Time for mega refactor, i guess.